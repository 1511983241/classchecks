<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd">

	<!-- 
		<context:annotation-config>相对于注册AutowiredAnnotationBeanPostProcessor、
		CommonAnnotationBeanPostProcessor、PersistenceAnnotationBeanPostProcessor
		 以及 RequiredAnnotationBeanPostProcessor 这 4 个BeanPostProcessor。
		支持的注解为： @Required, @Autowired, @PostConstruct 等,
		 使用了<context:component-scan/> 后就可以将该配置移除。
	 -->
	<!-- 自动扫描的包名 
		<context:component-scan/>包含了<context:annotation-config/>的功能
	-->
	<context:component-scan base-package="com.classchecks.client, com.classchecks.controller">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service"/>
	</context:component-scan>

	<!--
		<mvc:annotation-driven/>相当于注册了DefaultAnnotationHandlerMapping和
		AnnotationMethodHandlerAdapter两个bean，
		配置一些messageconverter。即解决了@Controller注解的使用前提配置。
	  -->
	<mvc:annotation-driven></mvc:annotation-driven>
	
	<mvc:resources mapping="/res/**" location="/resources/"></mvc:resources>
	

	<!-- 视图解析器:定义跳转的文件的前后缀 -->
	<bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/view/" />
		<property name="suffix" value=".jsp" />  <!--可为空,方便实现自已的依据扩展名来选择视图解释类的逻辑 -->
	</bean>
	
	<!-- 
		mvc:default-servlet-handler ，会在Spring MVC上下文中定义一个
		org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler，
		它会像一个检查员，对进入DispatcherServlet的URL进行筛查，如果发现是静态资源的请求，
		就将该请求转由Web应用服务器默认的Servlet处理，如果不是静态资源的请求，才由DispatcherServlet继续处理
	 -->
	<!-- <mvc:default-servlet-handler/> -->
	<!-- springmvc文件上传配置 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- set the max upload size100MB -->
		<property name="defaultEncoding" value="UTF-8"></property>
		<property name="maxUploadSize">
			<value>104857600</value>
		</property>
		<property name="maxInMemorySize">
			<value>4096</value>
		</property>
	</bean>

</beans>
